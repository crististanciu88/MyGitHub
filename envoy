apiVersion: networking.istio.io/v1beta1
kind: EnvoyFilter
metadata:
  name: internal-gateway-access-log
  namespace: your-namespace
spec:
  workloadSelector:
    labels:
      istio: your-internal-gateway # Replace with the actual labels for your gateway pods
  configPatches:
  - applyTo: NETWORK_FILTER
    match:
      context: GATEWAY
      proxy:
        proxyVersion: ^1.7.0.* # Replace with your Envoy version if necessary
      listener:
        name: internal-gateway-http
        portNumber: 80
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
    patch:
      operation: MERGE
      value:
        access_log:
          - name: "envoy.access_loggers.stdout"
            filter:
              filter_expression: "request.headers['x-envoy-internal'] == 'true'"

```yaml
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: filter-logs
  namespace: aks-istio-ingress
spec:
  workloadSelector:
    labels:
      istio: ingressgateway  # This selects the ingress gateway workloads
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: GATEWAY
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
    patch:
      operation: INSERT_BEFORE
      value:
        name: "envoy.filters.http.lua"
        typed_config:
          "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
          inlineCode: |
            function envoy_on_request(request_handle)
              -- Check if the RouteName header is "kubetail"
              local route_name = request_handle:headers():get("x-envoy-original-route-name") -- Use the appropriate header key
              if route_name == "kubetail" then
                -- Prevent logging for this request
                request_handle:headers():replace("x-envoy-access-log", "false")
              end
            end
```
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: exclude-access-logs
  namespace: aks-istio-system  # Update with your destination namespace
spec:
  workloadSelector:
    labels:
      app: aks-istio-ingresgateway-internal  # Update with your ingress gateway app label
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: GATEWAY  # For ingress gateway; use SIDECAR_INBOUND if filtering within a pod
        listener:
          filterChain:
            filter:
              name: "envoy.filters.network.http_connection_manager"
      patch:
        operation: MERGE
        value:
          access_log:
            - name: "envoy.access_loggers.file"
              typed_config:
                "@type": "type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog"
                log_format:
                  text_format_source:
                    inline_string: "Logging request for server: %REQ(:AUTHORITY)%\n"
                path: "/dev/stdout"  # Change this to a file path as needed
              filter:
                expression: "request.headers[\":authority\"] != \"logs.rb-dev.azpriv-cloud.net\" && streamInfo.requestedServerName != \"logs.rb-dev.azpriv-cloud.net\""
