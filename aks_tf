locals {
  kubernetes_version = "1.28"
  vnet_config = local.network_config[0]

  aks_system_node_pool = {
    enable_auto_scaling     = true
    max_count               = 5
    max_pods                = 30
    min_count               = 3
    name                    = "nodepool0"
    node_taints             = []
    os_disk_size_gb         = 100
    os_disk_type            = "Managed"
    upgrade_max_surge       = 1
    vm_size                 = "Standard_B2ms"
    zones                   = ["1", "2", "3"]
    custom_ca_trust_enabled = true
  }

  aks_additional_node_pools = {
    "nodepool1" = {
      enable_auto_scaling = true
      max_count           = 10
      max_pods            = 30
      min_count           = 2
      mode                = "User"
      node_labels         = {}
      node_taints         = []
      os_disk_size_gb     = 100
      os_disk_type        = "Managed"
      upgrade_max_surge   = "33%"
      vm_size             = "Standard_D8s_v5"
      zones               = []
      custom_ca_trust_enabled = true
      subnet_name         = local.vnet_config.subnets[1]  # Dynamically assign subnet
    }
  }

  aks_storage_profile = {
    blob_driver_enabled         = false
    disk_driver_enabled         = true
    disk_driver_version         = "v1"
    file_driver_enabled         = true
    snapshot_controller_enabled = true
  }
  aks_image_cleaner_enabled      = false
  aks_ubs_upload_ca_certs_to_aks = true
  aks_service_mesh_profile = {
    enabled                          = true
    internal_ingress_gateway_enabled = true
  }
  aks_admin_group_object_id = "80f7067f-5b5b-4e80-84ae-af0d59b4e439" # not our group
}

resource "azurerm_resource_group" "aks_rg" {
  name     = "tf-aks-${var.environmentName}-${var.location}-rg"
  location = var.location
  tags     = local.tags

  lifecycle {
    ignore_changes = [
      tags["hostingRestrictions"],
    ]
  }
}

module "aks" {
  source  = "devcloud.ubs.net/iac/kubernetes-cluster/azurerm"
  version = "3.2.1"

  resource_group_name = azurerm_resource_group.aks_rg.name
  location            = azurerm_resource_group.aks_rg.location
  sku_tier            = "Standard"
  cluster_name_suffix = "dev2"

  subnet_name  = local.vnet_config.subnets[0]  # Subnet for the system node pool
  vnet_name    = local.vnet_config.vnet_name
  vnet_rg_name = local.vnet_config.vnet_rg_name

  disk_encryption_set_name    = var.csre_disk_encryption_set_name
  disk_encryption_set_rg_name = var.csre_resource_group
  storage_profile             = local.aks_storage_profile

  admin_group_object_id = local.aks_admin_group_object_id
  system_node_pool      = local.aks_system_node_pool
  additional_node_pools = local.aks_additional_node_pools
  kubernetes_version    = local.kubernetes_version

  image_cleaner_enabled      = local.aks_image_cleaner_enabled
  ubs_upload_ca_certs_to_aks = local.aks_ubs_upload_ca_certs_to_aks
  service_mesh_profile       = local.aks_service_mesh_profile

  log_analytics_workspace_id          = local.log_analytics_workspace_id
  log_analytics_defender_workspace_id = local.log_analytics_workspace_id

  cp_user_assigned_identities = {
    "dev" : {
      uami_name    = "UAMI_DEV_NEU_AT3655_AKS_CP"
      uami_rg_name = var.csre_resource_group
    }
  }
  rt_user_assigned_identities = {
    "dev" : {
      uami_name    = "UAMI_DEV_NEU_AT3655_AKS_RT"
      uami_rg_name = var.csre_resource_group
    }
  }
  tags = module.tagging.subscription_tags
}

module "aks_test" {
  source  = "devcloud.ubs.net/iac/kubernetes-cluster/azurerm"
  version = "3.2.1"

  resource_group_name = azurerm_resource_group.aks_rg.name
  location            = azurerm_resource_group.aks_rg.location
  cluster_name_suffix = "tst2"

  subnet_name  = local.vnet_config.subnets[0]  # Subnet for the system node pool
  vnet_name    = local.vnet_config.vnet_name
  vnet_rg_name = local.vnet_config.vnet_rg_name

  disk_encryption_set_name    = var.csre_disk_encryption_set_name
  disk_encryption_set_rg_name = var.csre_resource_group
  storage_profile             = local.aks_storage_profile

  admin_group_object_id = local.aks_admin_group_object_id
  system_node_pool      = local.aks_system_node_pool
  additional_node_pools = local.aks_additional_node_pools
  kubernetes_version    = local.kubernetes_version
}
