func UamiLogin(input UamiLoginInput) (string, error) {
	cred, err := azidentity.NewManagedIdentityCredential(&azidentity.ManagedIdentityCredentialOptions{
		ID: azidentity.ClientID(input.UamiID),
	})
	if err != nil {
		return "", fmt.Errorf("failed to create managed identity credential: %v", err)
	}

	token, err := cred.GetToken(context.Background(), policy.TokenRequestOptions{
		Scopes: []string{"https://vault.azure.net/.default"},
	})
	if err != nil {
		return "", fmt.Errorf("failed to get token: %v", err)
	}

	values := map[string]string{
		"jwt":      token.Token,
		"roleName": input.UamiName,
	}
	jsonStr, err := json.Marshal(values)
	if err != nil {
		return "", fmt.Errorf("failed to marshal login values: %v", err)
	}

	req, err := http.NewRequest("POST", input.EvaUrl+"/auth/azure/login", bytes.NewBuffer(jsonStr))
	if err != nil {
		return "", fmt.Errorf("failed to create login request: %v", err)
	}
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("X-Vault-Namespace", input.Namespace)

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return "", fmt.Errorf("login request failed: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("login request returned status: %v", resp.Status)
	}

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return "", fmt.Errorf("failed to read login response body: %v", err)
	}

	var loginResponse LoginResponse
	err = json.Unmarshal(body, &loginResponse)
	if err != nil {
		return "", fmt.Errorf("failed to unmarshal login response: %v", err)
	}

	return loginResponse.Auth.ClientToken, nil
}
