package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"time"
)

type UamiLoginInput struct {
	UamiName  string
	UamiID    string
	Namespace string
	EvaUrl    string
}

type LoginResponse struct {
	RequestId     string `json:"request_id"`
	LeaseId       string `json:"lease_id"`
	Renewable     bool   `json:"renewable"`
	LeaseDuration int    `json:"lease_duration"`
	Data          string `json:"data"`
	WrapInfo      string `json:"wrap_info"`
	Warnings      string `json:"warnings"`
	Auth          Auth   `json:"auth"`
}

type Auth struct {
	ClientToken    string   `json:"client_token"`
	Accessor       string   `json:"accessor"`
	Policies       []string `json:"policies"`
	TokenPolicies  []string `json:"token_policies"`
	Metadata       Metadata `json:"metadata"`
	LeaseDuration  int      `json:"lease_duration"`
	Renewable      bool     `json:"renewable"`
	EntityID       string   `json:"entity_id"`
	TokenType      string   `json:"token_type"`
	Orphan         bool     `json:"orphan"`
	MfaRequirement string   `json:"mfa_requirement"`
	NumUses        int      `json:"num_uses"`
}

type Metadata struct {
	AuthorityKeyId string `json:"authority_key_id"`
	CertName       string `json:"cert_name"`
	CommonName     string `json:"common_name"`
	SerialNumber   string `json:"serial_number"`
	SubjectKeyId   string `json:"subject_key_id"`
}

type ReadData struct {
	Data map[string]string `json:"data"`
}

type ReadResponse struct {
	RequestId     string                 `json:"request_id"`
	LeaseId       string                 `json:"lease_id"`
	Renewable      bool                  `json:"renewable"`
	LeaseDuration int                    `json:"lease_duration"`
	Data           map[string]interface{} `json:"data"`
	WrapInfo      string                 `json:"wrap_info"`
	Warnings      string                 `json:"warnings"`
	Auth          Auth                   `json:"auth"`
}

type ReadMetadata struct {
	CreatedTime    time.Time `json:"created_time"`
	CustomMetadata string    `json:"custom_metadata"`
	DeletionTime   string    `json:"deletion_time"`
	Destroyed      bool      `json:"destroyed"`
	Version        int       `json:"version"`
}

func UamiLogin(input UamiLoginInput) (string, error) {
	// Fetch the token from Azure IMDS for management.core.windows.net
	imdsURL := fmt.Sprintf("http://169.254.169.254/metadata/identity/oauth2/token?resource=https://management.core.windows.net/&client_id=%s&api-version=2023-07-01", input.UamiID)
	req, err := http.NewRequest("GET", imdsURL, nil)
	if err != nil {
		return "", fmt.Errorf("failed to create IMDS request: %v", err)
	}
	req.Header.Set("Metadata", "true")

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return "", fmt.Errorf("IMDS request failed: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("IMDS request returned status: %v", resp.Status)
	}

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return "", fmt.Errorf("failed to read IMDS response body: %v", err)
	}

	var imdsResponse struct {
		AccessToken string `json:"access_token"`
	}
	err = json.Unmarshal(body, &imdsResponse)
	if err != nil {
		return "", fmt.Errorf("failed to unmarshal IMDS response: %v", err)
	}

	// Log IMDS response
	log.Printf("IMDS Response: %s\n", string(body))

	// Use the IMDS token to authenticate with the EVA Vault
	values := map[string]string{
		"jwt":  imdsResponse.AccessToken,
		"role": input.UamiName,
	}
	jsonStr, err := json.Marshal(values)
	if err != nil {
		return "", fmt.Errorf("failed to marshal login values: %v", err)
	}

	req, err = http.NewRequest("POST", input.EvaUrl+"/auth/azure/login", bytes.NewBuffer(jsonStr))
	if err != nil {
		return "", fmt.Errorf("failed to create login request: %v", err)
	}
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("X-Vault-Namespace", input.Namespace)

	resp, err = client.Do(req)
	if err != nil {
		return "", fmt.Errorf("login request failed: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		body, _ = ioutil.ReadAll(resp.Body)
		return "", fmt.Errorf("login request returned status: %v, response: %s", resp.Status, string(body))
	}

	body, err = ioutil.ReadAll(resp.Body)
	if err != nil {
		return "", fmt.Errorf("failed to read login response body: %v", err)
	}

	var loginResponse LoginResponse
	err = json.Unmarshal(body, &loginResponse)
	if err != nil {
		return "", fmt.Errorf("failed to unmarshal login response: %v", err)
	}

	return loginResponse.Auth.ClientToken, nil
}

func GetRotationDate(token, namespace, url string) (string, error) {
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return "", fmt.Errorf("failed to create request: %v", err)
	}
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("X-Vault-Token", token)
	req.Header.Set("X-Vault-Namespace", namespace)

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return "", fmt.Errorf("request failed: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		body, _ := ioutil.ReadAll(resp.Body)
		return "", fmt.Errorf("request returned status: %v, response: %s", resp.Status, string(body))
	}

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return "", fmt.Errorf("failed to read response body: %v", err)
	}

	var readResponse ReadResponse
	err = json.Unmarshal(body, &readResponse)
	if err != nil {
		return "", fmt.Errorf("failed to unmarshal response: %v", err)
	}

	metadataJSON, err := json.Marshal(readResponse.Data["metadata"])
	if err != nil {
		return "", fmt.Errorf("failed to marshal metadata: %v", err)
	}

	var readMetadata ReadMetadata
	err = json.Unmarshal(metadataJSON, &readMetadata)
	if err != nil {
		return "", fmt.Errorf("failed to unmarshal metadata: %v", err)
	}

	timeElapsed := time.Since(readMetadata.CreatedTime)
	if timeElapsed < 11*30*24*time.Hour { // less than 11 months
		return fmt.Sprintf("Time passed since creation: %v", timeElapsed), nil
	}

	return "Rotation not needed", nil
}

func main() {
	uamiInput := UamiLoginInput{
		UamiName:  "your-azure-uami-role",
		UamiID:    "your-azure-uami-id",
		Namespace: "your-namespace",
		EvaUrl:    "https://vault.eu.eva.ubs.net/v1",
	}

	token, err := UamiLogin(uamiInput)
	if err != nil {
		log.Fatalf("UamiLogin failed: %v", err)
	}

	url := "https://vault.eu.eva.ubs.net/v1/secret/data/runtime/a96ad003a6e00cb3ff1f49bce347f4baf6c96f2b29c51b66136e523871ae19b0/svc_efiduat"
	result, err := GetRotationDate(token, uamiInput.Namespace, url)
	if err != nil {
		log.Fatalf("GetRotationDate failed: %v", err)
	}

	fmt.Println(result)
}
