func CertLogin(vaultURL, namespace, certPath, keyPath string) (*Auth, error) {
  values := map[string]string{"name": namespace}
  jsonStr, err := json.Marshal(values)
  if err != nil {
    return nil, fmt.Errorf("failed to marshal login data: %w", err)
  }

  req, err := http.NewRequest("POST", vaultURL+"/auth/cert/login", bytes.NewBuffer(jsonStr))
  if err != nil {
    return nil, fmt.Errorf("failed to create request: %w", err)
  }
  req.Header.Set("Content-Type", "application/json")
  req.Header.Set("X-Vault-Namespace", namespace)

  x509cert, err := tls.LoadX509KeyPair(certPath, keyPath)
  if err != nil {
    return nil, fmt.Errorf("failed to load certificate: %w", err)
  }

  certs := []tls.Certificate{x509cert}
  tr := &http.Transport{
    TLSClientConfig: &tls.Config{Certificates: certs},
  }

  client := &http.Client{Transport: tr}
  resp, err := client.Do(req)
  if err != nil {
    return nil, fmt.Errorf("failed to execute request: %w", err)
  }
  defer resp.Body.Close()

  if resp.StatusCode != http.StatusOK {
    body, _ := ioutil.ReadAll(resp.Body)
    return nil, fmt.Errorf("error logging into Vault: %s", string(body))
  }

  var loginresponse LoginResponse
  err = json.Unmarshal(body, &loginresponse)
  if err != nil {
    return nil, fmt.Errorf("failed to unmarshal login response: %w", err)
  }

  return &loginresponse.Auth, nil
}
