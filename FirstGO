func UamiLogin(input UamiLoginInput) (string, error) {
	// Fetch the token from Azure IMDS for management.core.windows.net
	imdsURL := fmt.Sprintf("http://169.254.169.254/metadata/identity/oauth2/token?resource=https://management.core.windows.net&client_id=%s&api-version=2023-07-01", input.UamiID)
	req, err := http.NewRequest("GET", imdsURL, nil)
	if err != nil {
		return "", fmt.Errorf("failed to create IMDS request: %v", err)
	}
	req.Header.Set("Metadata", "true")

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return "", fmt.Errorf("IMDS request failed: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("IMDS request returned status: %v", resp.Status)
	}

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return "", fmt.Errorf("failed to read IMDS response body: %v", err)
	}

	var imdsResponse struct {
		AccessToken string `json:"access_token"`
	}
	err = json.Unmarshal(body, &imdsResponse)
	if err != nil {
		return "", fmt.Errorf("failed to unmarshal IMDS response: %v", err)
	}

	// Use the IMDS token to authenticate with the EVA Vault
	values := map[string]string{
		"jwt":  imdsResponse.AccessToken,
		"role": input.UamiName,
	}
	jsonStr, err := json.Marshal(values)
	if err != nil {
		return "", fmt.Errorf("failed to marshal login values: %v", err)
	}

	req, err = http.NewRequest("POST", input.EvaUrl+"/auth/azure/login", bytes.NewBuffer(jsonStr))
	if err != nil {
		return "", fmt.Errorf("failed to create login request: %v", err)
	}
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("X-Vault-Namespace", input.Namespace)

	resp, err = client.Do(req)
	if err != nil {
		return "", fmt.Errorf("login request failed: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("login request returned status: %v", resp.Status)
	}

	body, err = ioutil.ReadAll(resp.Body)
	if err != nil {
		return "", fmt.Errorf("failed to read login response body: %v", err)
	}

	var loginResponse LoginResponse
	err = json.Unmarshal(body, &loginResponse)
	if err != nil {
		return "", fmt.Errorf("failed to unmarshal login response: %v", err)
	}

	return loginResponse.Auth.ClientToken, nil
}
