param (
    [string]$PfxCertificatePath,
    [string[]]$Servers,
    [string]$TechAccount,  # Technical account name
    [string]$PfxPassword   # Password for the PFX certificate
)

# Convert the password to SecureString
$securePassword = ConvertTo-SecureString $PfxPassword -AsPlainText -Force

# Load PFX certificate
try {
    $newCert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
    $newCert.Import($PfxCertificatePath, $securePassword, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::MachineKeySet)
    
    # Extract the CN from the new certificate
    $cnFromNewCert = ($newCert.Subject -split ', ' | Where-Object { $_ -like "CN=*" }) -replace 'CN=', ''
} catch {
    Write-Host "Failed to load PFX certificate: $_"
    exit
}

foreach ($server in $Servers) {
    try {
        # Establish a remote session to the server
        $session = New-PSSession -ComputerName $server -ErrorAction Stop

        $existingCert = Invoke-Command -Session $session -ScriptBlock {
            # Get the local machine certificate store
            $certStore = [System.Security.Cryptography.X509Certificates.X509Store]::New("My","LocalMachine")
            $certStore.Open("ReadOnly")

            # Find the existing technical account certificate by CN
            $existingCert = $certStore.Certificates | Where-Object { $_.Subject -like "*CN=$using:TechAccount*" }
            $certStore.Close()

            return $existingCert
        }

        if ($existingCert) {
            if ($newCert.NotAfter -gt $existingCert.NotAfter) {
                Write-Host "Updating certificate on $server for CN=$TechAccount, as the new certificate is newer."
                # Replace existing certificate
                Invoke-Command -Session $session -ScriptBlock {
                    param ($pfxPath, $securePassword, $existingCertThumbprint)
                    $certStore = New-Object System.Security.Cryptography.X509Certificates.X509Store("My", "LocalMachine")
                    $certStore.Open("ReadWrite")
                    $existingCert = $certStore.Certificates | Where-Object { $_.Thumbprint -eq $existingCertThumbprint }
                    if ($existingCert) {
                        $certStore.Remove($existingCert)
                    }
                    $newCert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
                    $newCert.Import($pfxPath, $securePassword, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::MachineKeySet)
                    $certStore.Add($newCert)
                    $certStore.Close()
                } -ArgumentList $PfxCertificatePath, $securePassword, $existingCert.Thumbprint
            } else {
                Write-Host "No change needed for the certificate on $server for CN=$TechAccount."
            }
        } else {
            Write-Host "No existing certificate found for CN=$TechAccount on $server."
            # Add the new certificate if no existing certificate is found
            Invoke-Command -Session $session -ScriptBlock {
                param ($pfxPath, $securePassword)
                $certStore = New-Object System.Security.Cryptography.X509Certificates.X509Store("My", "LocalMachine")
                $certStore.Open("ReadWrite")
                $newCert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
                $newCert.Import($pfxPath, $securePassword, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::MachineKeySet)
                $certStore.Add($newCert)
                $certStore.Close()
            } -ArgumentList $PfxCertificatePath, $securePassword
        }

        Remove-PSSession -Session $session
    } catch {
        Write-Host "Failed to process $server: $_"
    }
}
